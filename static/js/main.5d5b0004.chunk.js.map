{"version":3,"sources":["App.tsx","helper/useLocalStorage.tsx","helper/GlobalContext.tsx","types/Status.ts","components/TodoItem.tsx","components/TodoList.tsx","components/Notification.tsx","components/TodosFilter.tsx","utils/fetchClient.ts","types/ErrorNotice.ts","api/api.ts","components/TodoApp.tsx","helper/getVisibleTodos.tsx","components/SignUpPage.tsx","index.tsx"],"names":["App","useLocalStorage","key","initialValue","useState","data","window","localStorage","getItem","JSON","parse","value","setValue","newValue","setItem","stringify","Status","GlobalContext","React","createContext","user","setUser","inProcessing","setProcessingIDs","GlobalProvider","children","contextValue","Provider","TodoItem","memo","item","handleComplete","handleDelete","handleChangeTitle","isEdit","setIsEdit","title","newTitle","setNewTitle","inputElement","useRef","isLoading","useContext","includes","id","useEffect","current","focus","className","classNames","editing","completed","onDoubleClick","type","toString","checked","onChange","htmlFor","aria-label","data-cy","onClick","ref","placeholder","event","target","onBlur","onKeyDown","TodoList","items","handleCompleteAll","hasActiveTodos","map","Notification","error","errorNotice","closeErrorNotice","hidden","filterList","link","ALL","ACTIVE","COMPLETED","TodosFilter","to","isActive","selected","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","options","body","headers","then","fetch","response","ok","Error","json","ErrorNotice","client","deleteTodo","todoId","completeTodo","renameTodo","TodoApp","todos","setTodos","setTitle","userID","setUserID","hasForm","setHasForm","errorMessage","setMessageError","pathname","useLocation","hasError","showError","message","loadingTodos","useCallback","a","userId","todosServer","LOADING","timeoutForErrorNotice","clearTimeout","addTodo","newTodo","handleSubmit","preventDefault","trim","TITLE","createdTodo","Date","ADD","handleSubmitUserId","userFromServer","status","UPDATE","todo","some","toggleAll","state","all","DELETE","filter","handleDeleteAll","todoIds","deleteAll","visibleTodos","useMemo","getVisibleTodos","activeTodos","completedTodos","onSubmit","name","length","SignUpPage","setName","email","setEmail","signUpNotice","setSignUpNotice","createUser","createRoot","document","getElementById","render","path","element","index"],"mappings":"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","file":"static/js/main.5d5b0004.chunk.js","sourcesContent":["import React from 'react';\nimport { Outlet } from 'react-router-dom';\n\nexport const App: React.FC = () => {\n  return (\n    <Outlet />\n  );\n};\n","import { useState } from 'react';\n\nexport function useLocalStorage<T>(key: string, initialValue: T[] | null) {\n  const [value, setValue] = useState(() => {\n    try {\n      const data = window.localStorage.getItem(key);\n\n      return data ? JSON.parse(data) : initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (newValue: T) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n}\n","import React, { useState } from 'react';\nimport { User } from '../types/User';\nimport { useLocalStorage } from './useLocalStorage';\nimport { GlobalContent } from '../types/GlobalContent';\n\ninterface Props {\n  children: React.ReactNode,\n}\n\nexport const GlobalContext = React.createContext<GlobalContent>({\n  user: null,\n  setUser: () => {},\n  inProcessing: [],\n  setProcessingIDs: () => {},\n});\n\nexport const GlobalProvider: React.FC<Props> = ({ children }) => {\n  const [user, setUser] = useLocalStorage<User>('user', null);\n  const [inProcessing, setProcessingIDs] = useState([0]);\n\n  const contextValue = {\n    user,\n    setUser,\n    inProcessing,\n    setProcessingIDs,\n  };\n\n  return (\n    <GlobalContext.Provider value={contextValue}>\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","export enum Status {\n  ALL = 'All',\n  ACTIVE = 'Active',\n  COMPLETED = 'Completed',\n}\n","import React, {\n  useContext, useEffect, useRef, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\nimport { GlobalContext } from '../helper/GlobalContext';\n\ninterface Props {\n  item: Todo,\n  handleComplete: (todoId: number, status: boolean) => void,\n  handleDelete: (todoId: number) => void,\n  handleChangeTitle: (todoId: number, newTitle: string) => void,\n\n}\n\nexport const TodoItem: React.FC<Props> = React.memo(({\n  item,\n  handleComplete,\n  handleDelete,\n  handleChangeTitle,\n}) => {\n  const [isEdit, setIsEdit] = useState(false);\n  const [newTitle, setNewTitle] = useState(item.title);\n  const inputElement = useRef<HTMLInputElement>(null);\n  const { inProcessing } = useContext(GlobalContext);\n  const isLoading = inProcessing.includes(item.id);\n\n  useEffect(() => {\n    if (inputElement.current) {\n      inputElement.current.focus();\n    }\n  }, [isEdit]);\n\n  const saveOrCancelChanges = (event: React.KeyboardEvent) => {\n    if (event.key === 'Escape') {\n      setIsEdit(false);\n      setNewTitle(item.title);\n\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      handleChangeTitle(item.id, newTitle);\n      setIsEdit(false);\n    }\n  };\n\n  const saveOnBlur = () => {\n    handleChangeTitle(item.id, newTitle);\n    setIsEdit(false);\n  };\n\n  return (\n    <div\n      className={classNames(\n        { 'is-active': isLoading },\n        { editing: isEdit },\n        { completed: item.completed },\n      )}\n      onDoubleClick={() => setIsEdit(true)}\n    >\n      {isLoading && <div className=\"spinner\" />}\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={item.id.toString()}\n          checked={item.completed}\n          onChange={() => handleComplete(item.id, item.completed)}\n        />\n        <label htmlFor=\"toggle-view\">\n          {item.title}\n        </label>\n        <button\n          aria-label=\"button delete todo\"\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          onClick={() => handleDelete(item.id)}\n        />\n      </div>\n      <input\n        ref={inputElement}\n        type=\"text\"\n        className=\"edit\"\n        placeholder=\"Empty todo will be deleted\"\n        value={newTitle}\n        onChange={(event) => setNewTitle(event.target.value)}\n        onBlur={saveOnBlur}\n        onKeyDown={saveOrCancelChanges}\n      />\n    </div>\n  );\n});\n","import React from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodoItem } from './TodoItem';\n\ninterface Props {\n  items: Todo[],\n  handleComplete: (todoId: number, status: boolean) => void,\n  handleCompleteAll: () => void,\n  hasActiveTodos: boolean,\n  handleDelete: (todoId: number) => void,\n  handleChangeTitle: (todoId: number, newTitle: string) => void,\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  items,\n  handleComplete,\n  handleCompleteAll,\n  hasActiveTodos,\n  handleDelete,\n  handleChangeTitle,\n}) => {\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        data-cy=\"toggleAll\"\n        onChange={handleCompleteAll}\n        checked={hasActiveTodos}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\" data-cy=\"todoList\">\n        {items.map(item => (\n          <li key={item.id}>\n            <TodoItem\n              item={item}\n              handleComplete={handleComplete}\n              handleDelete={handleDelete}\n              handleChangeTitle={handleChangeTitle}\n            />\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n});\n","import classNames from 'classnames';\nimport React from 'react';\n\ninterface Props {\n  error: boolean,\n  errorNotice: string,\n  closeErrorNotice: (state: string) => void,\n}\n\nexport const Notification: React.FC<Props> = React.memo(\n  ({\n    error,\n    errorNotice,\n    closeErrorNotice,\n  }) => {\n    return (\n      <div\n        className={classNames(\n          'notification',\n          { hidden: !error },\n        )}\n      >\n        <button\n          aria-label=\"btn\"\n          type=\"button\"\n          className=\"notification__delete\"\n          onClick={() => closeErrorNotice('')}\n        />\n\n        {errorNotice}\n      </div>\n    );\n  },\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Status } from '../types/Status';\n\nconst filterList = [\n  { link: '/', title: Status.ALL },\n  { link: '/active', title: Status.ACTIVE },\n  { link: '/completed', title: Status.COMPLETED },\n];\n\nexport const TodosFilter: React.FC = React.memo(() => {\n  return (\n    <ul className=\"filters\">\n      {filterList.map(item => (\n        <li key={item.title}>\n          <NavLink\n            to={item.link}\n            className={({ isActive }) => classNames({ selected: isActive })}\n          >\n            {item.title}\n          </NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n});\n","import { Data } from '../types/Data';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data?: Data,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Data) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: Data) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorNotice {\n  LOADING = 'Unable loading data',\n  ADD = 'Unable to add a todo',\n  DELETE = 'Unable to delete a todo',\n  UPDATE = 'Unable to update a todo',\n  TITLE = 'Title can\\'t be empty',\n}\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const addTodoOnServer = (data: Todo) => {\n  return client.post('/todos', data);\n};\n\nexport const addUser = (data: User) => {\n  return client.post<User>('/users', data);\n};\n\nexport const getUser = (userId: string) => {\n  return client.get<User>(`/users/${userId}`);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const completeTodo = (todoId: number, data: boolean) => {\n  return client.patch(`/todos/${todoId}`, { completed: data });\n};\n\nexport const renameTodo = (todoId: number, title: string) => {\n  return client.patch(`/todos/${todoId}`, { title });\n};\n","import React, {\n  useCallback, useContext, useEffect, useMemo, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { Link, useLocation } from 'react-router-dom';\nimport { TodoList } from './TodoList';\nimport { Notification } from './Notification';\nimport { TodosFilter } from './TodosFilter';\nimport { getVisibleTodos } from '../helper/getVisibleTodos';\nimport { useLocalStorage } from '../helper/useLocalStorage';\nimport { Todo } from '../types/Todo';\nimport {\n  addTodoOnServer, completeTodo, deleteTodo, getTodos, getUser,\n  renameTodo,\n} from '../api/api';\nimport { GlobalContext } from '../helper/GlobalContext';\nimport { ErrorNotice } from '../types/ErrorNotice';\n\nexport const TodoApp: React.FC = () => {\n  const [todos, setTodos] = useLocalStorage<Todo[]>('todos', []);\n  const [title, setTitle] = useState('');\n  const [userID, setUserID] = useState<string>('');\n  const [hasForm, setHasForm] = useState(false);\n  const [errorMessage, setMessageError] = useState('');\n  const { pathname } = useLocation();\n  const { user, setUser, setProcessingIDs } = useContext(GlobalContext);\n  const hasError = !!errorMessage;\n\n  const showError = (message: string) => {\n    setMessageError(message);\n  };\n\n  const loadingTodos = useCallback(async () => {\n    if (!user) {\n      return;\n    }\n\n    try {\n      const todosServer = await getTodos(+user.id);\n\n      setTodos(todosServer);\n    } catch (error) {\n      showError(ErrorNotice.LOADING);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    const timeoutForErrorNotice = setTimeout(() => setMessageError(''), 3000);\n\n    return () => {\n      clearTimeout(timeoutForErrorNotice);\n    };\n  }, [errorMessage]);\n\n  useEffect(() => {\n    if (user) {\n      loadingTodos();\n    }\n  }, [user]);\n\n  const addTodo = (newTodo: Todo) => {\n    setTodos([...todos, newTodo]);\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setProcessingIDs([0]);\n\n    if (!title.trim()) {\n      showError(ErrorNotice.TITLE);\n\n      return;\n    }\n\n    const createdTodo: Todo = {\n      id: +new Date(),\n      title,\n      completed: false,\n    };\n\n    if (user) {\n      addTodo(createdTodo);\n      createdTodo.id = 0;\n      createdTodo.userId = user.id;\n\n      try {\n        await addTodoOnServer(createdTodo);\n      } catch (error) {\n        showError(ErrorNotice.ADD);\n      } finally {\n        loadingTodos();\n      }\n\n      setTitle('');\n\n      return;\n    }\n\n    addTodo(createdTodo);\n    setTitle('');\n  };\n\n  const handleSubmitUserId = async (\n    event: React.FormEvent<HTMLFormElement>,\n  ) => {\n    event.preventDefault();\n\n    try {\n      const userFromServer = await getUser(userID);\n\n      setUser(userFromServer);\n      setUserID('');\n      setHasForm(false);\n    } catch (error) {\n      showError(ErrorNotice.LOADING);\n    }\n  };\n\n  const handleComplete = useCallback(\n    async (todoId: number, status: boolean) => {\n      setProcessingIDs([todoId]);\n\n      if (user) {\n        try {\n          await completeTodo(todoId, !status);\n          loadingTodos();\n          setProcessingIDs([]);\n        } catch (error) {\n          showError(ErrorNotice.UPDATE);\n        }\n\n        return;\n      }\n\n      setTodos((todos.map((todo: Todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return { ...todo, completed: !todo.completed };\n      })));\n\n      setProcessingIDs([]);\n    }, [setTodos],\n  );\n\n  const handleCompleteAll = useCallback(async () => {\n    const status = todos.some((todo: Todo) => !todo.completed);\n\n    if (user) {\n      try {\n        const toggleAll = todos.map((todo: Todo) => {\n          if (todo.completed !== status) {\n            setProcessingIDs(state => [...state, todo.id]);\n\n            return completeTodo(todo.id, !todo.completed);\n          }\n\n          return todo;\n        });\n\n        await Promise.all(toggleAll);\n        setProcessingIDs([]);\n        loadingTodos();\n      } catch (error) {\n        showError(ErrorNotice.UPDATE);\n      }\n\n      return;\n    }\n\n    setTodos((todos.map((todo: Todo) => {\n      if (todo.completed !== status) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    })));\n  }, [setTodos]);\n\n  const handleDelete = useCallback(async (todoId: number) => {\n    if (user) {\n      try {\n        setProcessingIDs([todoId]);\n        await deleteTodo(todoId);\n\n        loadingTodos();\n      } catch (error) {\n        showError(ErrorNotice.DELETE);\n      }\n\n      setProcessingIDs([0]);\n\n      return;\n    }\n\n    setTodos(todos.filter((todo: Todo) => todo.id !== todoId));\n  }, [setTodos]);\n\n  const handleDeleteAll = async (todoIds: number[]) => {\n    if (user) {\n      try {\n        setProcessingIDs(todoIds);\n        const deleteAll = todoIds.map(id => deleteTodo(id));\n\n        await Promise.all(deleteAll);\n        loadingTodos();\n      } catch (error) {\n        showError(ErrorNotice.DELETE);\n      }\n\n      setProcessingIDs([]);\n\n      return;\n    }\n\n    setTodos(todos.filter(\n      (todo: Todo) => !todoIds.includes(todo.id),\n    ));\n  };\n\n  const handleChangeTitle = useCallback(\n    async (todoId: number, newTitle: string) => {\n      if (user) {\n        try {\n          setProcessingIDs([todoId]);\n\n          if (!newTitle.trim()) {\n            await deleteTodo(todoId);\n            setProcessingIDs([]);\n            loadingTodos();\n\n            return;\n          }\n\n          await renameTodo(todoId, newTitle);\n\n          setProcessingIDs([]);\n          loadingTodos();\n        } catch (error) {\n          showError(ErrorNotice.UPDATE);\n        }\n\n        return;\n      }\n\n      if (!newTitle.trim()) {\n        handleDelete(todoId);\n\n        return;\n      }\n\n      setTodos(todos.map((todo: Todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return { ...todo, title: newTitle };\n      }));\n    }, [setTodos],\n  );\n\n  const getInOrGetOut = () => {\n    if (user) {\n      setHasForm(false);\n      setUser(null);\n\n      return;\n    }\n\n    setHasForm(!hasForm);\n  };\n\n  const visibleTodos = useMemo(() => (\n    getVisibleTodos(todos, pathname)),\n  [todos, pathname]);\n\n  const activeTodos = useMemo(() => (\n    todos.filter((todo: Todo) => !todo.completed)),\n  [todos]);\n\n  const completedTodos: Todo[] = useMemo(() => (\n    todos.filter((todo: Todo) => todo.completed)),\n  [todos]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              data-cy=\"createTodo\"\n              className=\"new-todo\"\n              value={title}\n              placeholder={user\n                ? `Hello ${user.name}, what needs to be done?`\n                : 'What needs to be done?'}\n              onChange={({ target }) => setTitle(target.value)}\n            />\n          </form>\n        </header>\n\n        {todos.length > 0 && (\n          <>\n            <TodoList\n              items={visibleTodos}\n              handleComplete={handleComplete}\n              handleCompleteAll={handleCompleteAll}\n              handleDelete={handleDelete}\n              handleChangeTitle={handleChangeTitle}\n              hasActiveTodos={!activeTodos.length}\n            />\n\n            <footer className=\"footer\">\n              <span className=\"todo-count\" data-cy=\"todosCounter\">\n                {`${activeTodos.length} items left`}\n              </span>\n\n              <TodosFilter />\n\n              {completedTodos.length > 0 && (\n                <button\n                  type=\"button\"\n                  className=\"clear-completed\"\n                  onClick={() => handleDeleteAll(\n                    completedTodos.map(todo => todo.id),\n                  )}\n                >\n                  Clear completed\n                </button>\n              )}\n            </footer>\n          </>\n        )}\n\n        <Link\n          to=\"/login\"\n          className=\"item item__sign-up\"\n        >\n          Sign up\n        </Link>\n\n        <button\n          type=\"button\"\n          className=\"item item__sign-in\"\n          onClick={getInOrGetOut}\n        >\n          {user ? 'Sign out' : 'Sign in'}\n        </button>\n\n        <div className={classNames(\n          'sign-in',\n          { 'show-form': !hasForm },\n        )}\n        >\n          <form\n            className=\"sign-in__form\"\n            onSubmit={handleSubmitUserId}\n          >\n            <input\n              className=\"sign-in__input\"\n              placeholder=\"ENTER USER ID\"\n              type=\"number\"\n              value={userID}\n              onChange={({ target }) => setUserID(target.value)}\n            />\n          </form>\n        </div>\n      </div>\n      {user && <h4>{`Your user ID ${user.id}`}</h4>}\n\n      <Notification\n        error={hasError}\n        errorNotice={errorMessage}\n        closeErrorNotice={setMessageError}\n      />\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const getVisibleTodos = (todos: Todo[], filter: string) => {\n  switch (filter) {\n    case '/active':\n      return todos.filter(todo => !todo.completed);\n\n    case '/completed':\n      return todos.filter(todo => todo.completed);\n\n    default:\n      return todos;\n  }\n};\n","import { useContext, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { User } from '../types/User';\nimport { addUser } from '../api/api';\nimport { GlobalContext } from '../helper/GlobalContext';\n\nexport const SignUpPage: React.FC = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [signUpNotice, setSignUpNotice] = useState('');\n  const { setUser, user } = useContext(GlobalContext);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (name.trim().length < 4) {\n      setSignUpNotice('name is too short');\n\n      return;\n    }\n\n    if (name.trim().length > 20) {\n      setSignUpNotice('name is too long');\n\n      return;\n    }\n\n    const createUser: User = {\n      id: 0,\n      name,\n      email,\n    };\n\n    try {\n      const userFromServer = await addUser(createUser);\n\n      setUser(userFromServer);\n      setSignUpNotice(`Sucsses, your ID ${userFromServer.id}`);\n    } catch (error) {\n      setSignUpNotice('something went wrong');\n    }\n\n    setName('');\n    setEmail('');\n  };\n\n  return (\n    <div className=\"sign-up__container\">\n      <h1 className=\"sign-up__title\">Sign up new user</h1>\n      <Link className=\"sign-up__link\" to=\"/\">\n        Home\n      </Link>\n\n      {user && (<h1>{`Hello ${user.name}`}</h1>)}\n\n      <div>\n        <h2 className=\"sign-up__sub-title\">Sign Up</h2>\n        <p className=\"sign-up__notice\">{signUpNotice}</p>\n\n        <form\n          className=\"sign-up\"\n          onSubmit={handleSubmit}\n        >\n          <label className=\"sign-up__label\">\n            {/* name: */}\n            <input\n              className=\"sign-up__input\"\n              type=\"text\"\n              placeholder=\"Name min 4 symbols\"\n              value={name}\n              onChange={({ target }) => setName(target.value)}\n            />\n          </label>\n\n          <label className=\"sign-up__label\">\n            {/* email: */}\n            <input\n              className=\"sign-up__input\"\n              type=\"text\"\n              placeholder=\"Email optionally\"\n              value={email}\n              onChange={({ target }) => setEmail(target.value)}\n            />\n          </label>\n\n          <button type=\"submit\" className=\"sign-up__button\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n","import './styles/index.scss';\nimport './styles/todo-list.scss';\nimport './styles/filters.scss';\nimport './styles/sign-in.scss';\nimport './styles/loader.scss';\nimport './styles/notification.scss';\nimport './styles/sign-up.scss';\n\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport { createRoot } from 'react-dom/client';\nimport { App } from './App';\nimport { TodoApp } from './components/TodoApp';\nimport { SignUpPage } from './components/SignUpPage';\nimport { GlobalProvider } from './helper/GlobalContext';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <GlobalProvider>\n        <Routes>\n          <Route path=\"/\" element={<App />} />\n          <Route index element={<TodoApp />} />\n          <Route path=\"active\" element={<TodoApp />} />\n          <Route path=\"completed\" element={<TodoApp />} />\n          <Route path=\"/login\" element={<SignUpPage />} />\n        </Routes>\n      </GlobalProvider>\n    </HashRouter>,\n  );\n"],"sourceRoot":""}